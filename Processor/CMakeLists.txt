CMAKE_MINIMUM_REQUIRED(VERSION 3.20)

PROJECT(
  6502_Processor
  VERSION 1.0.0
  DESCRIPTION "6502 Processor"
  LANGUAGES CXX
)

SET(APP_NAME Processor)

OPTION(${APP_NAME}_INSTALL "Generate installation target" ON)

GET_FILENAME_COMPONENT(PARENT_DIR ../ ABSOLUTE)

INCLUDE(Common)

ADD_LIBRARY(${APP_NAME})
ADD_LIBRARY(${APP_NAME}::${APP_NAME} ALIAS ${APP_NAME})

TARGET_SOURCES(${APP_NAME} INTERFACE
  FILE_SET HEADERS
  FILES 
        Bus.hpp
        Exceptions.hpp
        Executioner.hpp
        Formatters.hpp
        Logger.hpp
        Processor.hpp
        Singleton.hpp
        Types.hpp
  PRIVATE
        Bus.cpp
        Executioner.cpp
        Instructions.cpp
        Processor.cpp
)

SOURCE_GROUP(${APP_NAME} FILES
  Bus.cpp
  Bus.hpp
  Exceptions.hpp
  Executioner.cpp
  Executioner.hpp
  Formatters.hpp
  Instructions.cpp
  Logger.hpp
  Processor.cpp
  Processor.hpp
  Singleton.hpp
  Types.hpp
)

TARGET_COMPILE_FEATURES(${APP_NAME} PUBLIC cxx_std_20)

TARGET_INCLUDE_DIRECTORIES(${APP_NAME} PUBLIC
  "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>"
  "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
)

#COMMON_LANGUAGE_PARAMETERS()
COMMON_SET_PROJECT_FLAGS()
#COMMON_SET_TARGET_COMPILE_DEFINITIONS(TARGETS ${APP_NAME} "${APP_NAME}-shared" "${APP_NAME}-static")

set_compiler_version(
  CXX_STANDARD 20
  CXX_STANDARD_REQUIRED ON
  CXX_EXTENSIONS ON
  TARGET "${APP_NAME}"
)

#IF(DEBUG)
#  TARGET_COMPILE_OPTIONS("${APP_NAME}" INTERFACE "-ferror-limit=50")
#ENDIF()
#
#TARGET_COMPILE_DEFINITIONS("${APP_NAME}" INTERFACE
#  DEBUG=${DEBUG}
#  DECIMAL_MODE=${DECIMAL_MODE}
#  ILLEGAL=${WITH_ILLEGAL}
#  LOGMODE=${WITH_LOGGING}
#  EMULATE65C02=${EMULATE65C02}
#)

IF(
  DEFINED LOGFILE
  AND NOT LOGFILE STREQUAL ""
  AND NOT LOGFILE STREQUAL "Processor.log"
)
  TARGET_COMPILE_DEFINITIONS("${APP_NAME}" INTERFACE LOGFILE=${LOGFILE})
ENDIF()

# BEGIN DEPENDENCIES
FIND_PACKAGE(fmt REQUIRED CONFIG)
IF(fmt_FOUND)
  TARGET_LINK_LIBRARIES("${APP_NAME}" PUBLIC fmt::fmt-header-only)
ENDIF()

FIND_PACKAGE(spdlog REQUIRED)
IF(spdlog_FOUND)
  TARGET_LINK_LIBRARIES("${APP_NAME}" PUBLIC spdlog::spdlog_header_only)
ENDIF()
# END DEPENDENCIES

IF(${APP_NAME}_INSTALL)
  COMMON_CREATE_INSTALL(NAME "${APP_NAME}"
    TARGETS "${APP_NAME}"
    INSTALL
  )
ELSE()
  COMMON_CREATE_INSTALL(NAME "${APP_NAME}"
    TARGETS "${APP_NAME}"
  )
ENDIF()
