CMAKE_MINIMUM_REQUIRED(VERSION 3.20)
PROJECT(imgui)

IF(NOT IMGUI_DIR)
	MESSAGE(FATAL_ERROR "IMGUI_DIR must be set to the imgui root directory")
ENDIF()

SET(PROJECT_LIB ${PROJECT_NAME})
SET(LINKER_LANGUAGE CXX)
SET(CMAKE_DEBUG_POSTFIX d)
SET(CMAKE_CXX_STANDARD 20)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS ON)

SET(CMAKE_VERBOSE_MAKEFILE ${CMAKE_VERBOSE_MAKEFILE})
SET(CMAKE_RULE_MESSAGES ${CMAKE_RULE_MESSAGES})

SET(ROOT ${IMGUI_DIR})
SET(BACKEND_DIR ${IMGUI_DIR}/backends)

SET(BACKEND_FILES)
SET(BACKEND_INCLUDES)
SET(BACKEND_LIBS)

OPTION(WITH_ALLEGRO5 "With Allegro5 support" OFF)
OPTION(WITH_ANDROID "With Android support" OFF)
OPTION(WITH_DIRECTX9 "With DirectX 9 support" OFF)
OPTION(WITH_DIRECTX10 "With DirectX 10 support" OFF)
OPTION(WITH_DIRECTX11 "With DirectX 11 support" OFF)
OPTION(WITH_DIRECTX12 "With DirectX 12 support" OFF)
OPTION(WITH_GLFW "With GLFW support" ON)
OPTION(WITH_GLUT "With GLUT support" OFF)
OPTION(WITH_METAL "With MacOS Metal support" ON)
OPTION(WITH_OPENGL2 "With OpenGL 2 support" OFF)
OPTION(WITH_OPENGL3 "With OpenGL 3 support" OFF)
OPTION(WITH_SDL "With SDL support" OFF)
OPTION(WITH_SDLRENDERER "With SDL Renderer support" OFF)
OPTION(WITH_VULKAN "With Vulkan support" OFF)
OPTION(WITH_WGPU "With WGPU support" OFF)
OPTION(WITH_WIN32 "With Win32 support" OFF)

IF(WITH_ALLEGRO5)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_allegro5.cpp
    ${BACKEND_DIR}/imgui_impl_allegro5.h
  )
ENDIF(WITH_ALLEGRO5)

IF(WITH_ANDROID)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_android.cpp
    ${BACKEND_DIR}/imgui_impl_android.h
  )
ENDIF(WITH_ANDROID)

IF(WITH_DIRECTX9)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_dx9.cpp
    ${BACKEND_DIR}/imgui_impl_dx9.h
  )
ENDIF(WITH_DIRECTX9)

IF(WITH_DIRECTX10)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_dx10.cpp
    ${BACKEND_DIR}/imgui_impl_dx10.h
  )
ENDIF(WITH_DIRECTX10)

IF(WITH_DIRECTX11)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_dx11.cpp
    ${BACKEND_DIR}/imgui_impl_dx11.h
  )
ENDIF(WITH_DIRECTX11)

IF(WITH_DIRECTX12)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_dx12.cpp
    ${BACKEND_DIR}/imgui_impl_dx12.h
  )
ENDIF(WITH_DIRECTX12)

IF(WITH_GLFW)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_glfw.cpp
    ${BACKEND_DIR}/imgui_impl_glfw.h
  )

  FIND_PACKAGE(GLFW3 REQUIRED)
  IF(GLFW3_FOUND)
    LIST(APPEND BACKEND_INCLUDES ${GLFW3_INCLUDE_DIR})
    LIST(APPEND BACKEND_LIBS ${GLFW3_LIBRARY})
  ENDIF()  
ENDIF(WITH_GLFW)

IF(WITH_GLUT)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_glut.cpp
    ${BACKEND_DIR}/imgui_impl_glut.h
  )

  FIND_PACKAGE(GLUT REQUIRED)
  IF (GLUT_FOUND)
    LIST(APPEND BACKEND_INCLUDES ${GLUT_INCLUDE_DIRS})
    LIST(APPEND BACKEND_LIBS ${GLUT_LIBRARIES})
  ENDIF()
ENDIF(WITH_GLUT)

IF(WITH_METAL AND APPLE)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_metal.mm
    ${BACKEND_DIR}/imgui_impl_metal.h
  )
  SET(CMAKE_FIND_FRAMEWORK ONLY)
  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)
  FIND_LIBRARY(IOKIT_LIBRARY IOKit)
  FIND_LIBRARY(COREVIDEO_LIBRARY CoreVideo)
  FIND_LIBRARY(METAL_LIBRARY Metal)
  FIND_LIBRARY(METALKIT_LIBRARY MetalKit)
  FIND_LIBRARY(QUARTZCORE_LIBRARY QuartzCore)

  LIST(APPEND BACKEND_LIBS
    "-framework Metal"
    "-framework MetalKit"
    "-framework Cocoa"
    "-framework IOKit"
    "-framework CoreVideo"
    "-framework QuartzCore"
    "-framework OpenGL"
  )
ENDIF()

IF(WITH_OPENGL2)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_opengl2.cpp
    ${BACKEND_DIR}/imgui_impl_opengl2.h
  )
  FIND_PACKAGE(OpenGL REQUIRED)
  IF(OPENGL_FOUND)
    LIST(APPEND BACKEND_INCLUDES ${OPENGL_INCLUDE_DIR})
    LIST(APPEND BACKEND_LIBS ${OPENGL_LIBRARIES})
  ENDIF()  
ENDIF(WITH_OPENGL2)

IF(WITH_OPENGL3)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_opengl3.cpp
    ${BACKEND_DIR}/imgui_impl_opengl3.h
  )
  FIND_PACKAGE(OpenGL REQUIRED)
  IF(OPENGL_FOUND)
    LIST(APPEND BACKEND_INCLUDES ${OPENGL_INCLUDE_DIR})
    LIST(APPEND BACKEND_LIBS ${OPENGL_LIBRARIES})
  ENDIF()  
ENDIF(WITH_OPENGL3)

IF(WITH_SDL)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_sdl.cpp
    ${BACKEND_DIR}/imgui_impl_sdl.h
  )
  FIND_PACKAGE(SDL2 REQUIRED)
  IF(SDL2_FOUND)
    LIST(APPEND BACKEND_INCLUDES ${SDL2_INCLUDE_DIRS})
    LIST(APPEND BACKEND_LIBS ${SDL2_LIBRARIES})
  ENDIF()
ENDIF(WITH_SDL)

IF(WITH_SDLRENDERER)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_sdlrenderer.cpp
    ${BACKEND_DIR}/imgui_impl_sdlrenderer.h
  )
  FIND_PACKAGE(SDL2 REQUIRED)
  IF(SDL2_FOUND)
    LIST(APPEND BACKEND_INCLUDES ${SDL2_INCLUDE_DIRS})
    LIST(APPEND BACKEND_LIBS ${SDL2_LIBRARIES})
  ENDIF()
ENDIF(WITH_SDLRENDERER)

IF(WITH_VULKAN)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_vulkan.cpp
    ${BACKEND_DIR}/imgui_impl_vulkan.h
  )
ENDIF(WITH_VULKAN)

IF(WITH_WGPU)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_wgpu.cpp
    ${BACKEND_DIR}/imgui_impl_wgpu.h
  )
ENDIF(WITH_WGPU)

IF(WITH_WIN32)
  LIST(APPEND BACKEND_FILES
    ${BACKEND_DIR}/imgui_impl_win32.cpp
    ${BACKEND_DIR}/imgui_impl_win32.h
  )
  LIST(APPEND BACKEND_INCLUDES ${WinSDK})
ENDIF(WITH_WIN32)

ADD_LIBRARY(imgui STATIC
	${ROOT}/imgui.cpp
	${ROOT}/imgui.h
	${ROOT}/imstb_rectpack.h
	${ROOT}/imstb_textedit.h
	${ROOT}/imstb_truetype.h
  ${ROOT}/imgui_demo.cpp
  ${ROOT}/imgui_draw.cpp
  ${ROOT}/imgui_internal.h
  ${ROOT}/imgui_tables.cpp
  ${ROOT}/imgui_widgets.cpp
  ${BACKEND_FILES}
)
TARGET_INCLUDE_DIRECTORIES(imgui PUBLIC
  $<BUILD_INTERFACE:${ROOT}>
  $<INSTALL_INTERFACE:include>
)

TARGET_LINK_LIBRARIES(imgui PUBLIC "${BACKEND_LIBS}")
TARGET_INCLUDE_DIRECTORIES(imgui PUBLIC "${BACKEND_INCLUDES}")
	
SET(INSTALL_TARGETS imgui)
SET(INSTALL_HEADERS ${ROOT}/imgui.h ${ROOT}/imconfig.h)

INSTALL(TARGETS ${INSTALL_TARGETS}
    EXPORT imgui-targets
    DESTINATION lib
)
INSTALL(EXPORT imgui-targets
    FILE imgui-config.cmake
    NAMESPACE imgui::
    DESTINATION lib/cmake/imgui
)
INSTALL(FILES ${INSTALL_HEADERS} DESTINATION include)
