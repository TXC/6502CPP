CMAKE_MINIMUM_REQUIRED(VERSION 3.20)

PROJECT(@IMGUI_NAME@ VERSION @IMGUI_VERSION@ LANGUAGES CXX)

INCLUDE(GNUInstallDirs)
INCLUDE(Common)

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS ON)

#SET(PROJECT_TYPE INTERFACE)
SET(PROJECT_TYPE STATIC)
#SET(PROJECT_INCLUDE INTERFACE)
SET(PROJECT_INCLUDE PUBLIC)

ADD_LIBRARY("@IMGUI_TARGET@" "${PROJECT_TYPE}")
ADD_LIBRARY("@IMGUI_NAME@::@IMGUI_TARGET@" ALIAS "@IMGUI_TARGET@")

SET(PROJ_LINK_TARGETS)

TARGET_SOURCES("@IMGUI_TARGET@" "${PROJECT_INCLUDE}"
  FILE_SET HEADERS
  FILES   imconfig.h
          imgui.h
          imstb_rectpack.h
          imstb_textedit.h
          imstb_truetype.h
          imgui_internal.h
  PRIVATE imgui.cpp
          imgui_demo.cpp
          imgui_draw.cpp
          imgui_tables.cpp
          imgui_widgets.cpp)

TARGET_INCLUDE_DIRECTORIES("@IMGUI_TARGET@" "${PROJECT_INCLUDE}" "${PROJECT_SOURCE_DIR}")

#TARGET_INCLUDE_DIRECTORIES("@IMGUI_TARGET@" "${PROJECT_INCLUDE}"
#  "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>"
#  "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")

SET_TARGET_PROPERTIES("@IMGUI_TARGET@" PROPERTIES
                            VERSION  "${${PROJECT_NAME}_VERSION}"
                    LINKER_LANGUAGE  "CXX"
                       CXX_STANDARD  "11"
              CXX_STANDARD_REQUIRED  "ON"
               CMAKE_CXX_EXTENSIONS  "ON")

#
# ImGui - Platform & Renderer - Allegro5
#
IF(Allegro5_FOUND)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_allegro5.h
    PRIVATE  backends/imgui_impl_allegro5.cpp)
ENDIF()

#
# ImGui - Platform - Android
#
IF(ANDROID)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_android.h
    PRIVATE  backends/imgui_impl_android.cpp)
ENDIF()

#
# ImGui - Platform - Win32 - Renderers - DirectX (9, 10, 11, 12)
#
IF(WIN32)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_dx9.h
    PRIVATE  backends/imgui_impl_dx9.cpp)
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ INTERFACE d3d9 d3dcompiler)
  LIST(APPEND PROJ_LINK_TARGETS d3d9 d3dcompiler)

  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_dx10.h
    PRIVATE  backends/imgui_impl_dx10.cpp)
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" d3d10 dxgi d3dcompiler)
  LIST(APPEND PROJ_LINK_TARGETS d3d10 dxgi d3dcompiler)

  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_dx11.h
    PRIVATE  backends/imgui_impl_dx11.cpp)
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" d3d11 dxgi d3dcompiler)
  LIST(APPEND PROJ_LINK_TARGETS d3d11 dxgi d3dcompiler)

  TARGET_SOURCES(@IMGUI_TARGET@::DX12 "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_dx12.h
    PRIVATE  backends/imgui_impl_dx12.cpp)
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" d3d12 dxgi d3dcompiler)
  LIST(APPEND PROJ_LINK_TARGETS d3d12 dxgi d3dcompiler)

  TARGET_SOURCES(@IMGUI_TARGET@ INTERFACE
    FILE_SET HEADERS
    FILES    backends/imgui_impl_win32.h
    PRIVATE  backends/imgui_impl_win32.cpp)
ENDIF()

#
# ImGui - Platform - GLFW
#
FIND_PACKAGE(glfw3 QUIET)
IF(glfw3_FOUND)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_glfw.h
    PRIVATE  backends/imgui_impl_glfw.cpp)
    TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" glfw)
ENDIF()  

#
# ImGui - Platform - GLUT
#
#FIND_PACKAGE(GLUT QUIET)
IF (GLUT_FOUND)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_glut.h
    PRIVATE  backends/imgui_impl_glut.cpp)
    #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" ${GLUT_LIBRARIES})
    TARGET_INCLUDE_DIRECTORIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" ${GLUT_INCLUDE_DIRS})
    LIST(APPEND PROJ_LINK_TARGETS ${GLUT_LIBRARIES})
ENDIF()

#
# ImGui - Platform - OSX - Renderer Metal
#
IF(APPLE)
  IF (DEFINED CMAKE_FIND_FRAMEWORK)
    SET (_APPLE_CMAKE_FIND_FRAMEWORK ${CMAKE_FIND_FRAMEWORK})
  ELSE()
    UNSET (_APPLE_CMAKE_FIND_FRAMEWORK)
  ENDIF()
  SET(CMAKE_FIND_FRAMEWORK ONLY)

  #ADD_FRAMEWORK(CoreVideo @IMGUI_TARGET@)

  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
  FIND_LIBRARY(IOKIT_LIBRARY IOKit)

  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)
  FIND_LIBRARY(COREVIDEO_LIBRARY CoreVideo)
  FIND_LIBRARY(METAL_LIBRARY Metal)
  FIND_LIBRARY(METALKIT_LIBRARY MetalKit)
  FIND_LIBRARY(QUARTZCORE_LIBRARY QuartzCore)

  IF (DEFINED _APPLE_CMAKE_FIND_FRAMEWORK)
    SET (CMAKE_FIND_FRAMEWORK ${_APPLE_CMAKE_FIND_FRAMEWORK})
    UNSET (_APPLE_CMAKE_FIND_FRAMEWORK)
  ELSE()
    UNSET (CMAKE_FIND_FRAMEWORK)
  ENDIF()

  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_metal.h
    PRIVATE  backends/imgui_impl_metal.mm
  )
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
  #  "${OPENGL_LIBRARY}"
  #  "${COREVIDEO_LIBRARY}"
  #  "${METAL_LIBRARY}"
  #  "${METALKIT_LIBRARY}"
  #  "${QUARTZCORE_LIBRARY}"
  #  #"-framework,Metal"
  #  #"-framework,MetalKit"
  #  #"-framework,CoreVideo"
  #  #"-framework,QuartzCore"
  #  #"-framework,OpenGL"
  #)
  LIST(APPEND PROJ_LINK_TARGETS
    "-Wl,-framework,MetalKit"
    "-Wl,-framework,Metal"
    "-Wl,-framework,CoreVideo"
    "-Wl,-framework,QuartzCore"
    "-Wl,-framework,OpenGL")

  #TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
  #  FILE_SET HEADERS
  #  FILES    backends/imgui_impl_osx.h
  #  PRIVATE  backends/imgui_impl_osx.mm
  #)
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
  #  ${COCOA_LIBRARY}
  #  ${IOKIT_LIBRARY}
  #  #"-framework,Cocoa"
  #  #"-framework,IOKit"
  #)
  LIST(APPEND PROJ_LINK_TARGETS
    "-Wl,-framework,Cocoa"
    "-Wl,-framework,IOKit")
ENDIF()

#
# ImGui - Renderer - OpenGL 2
#
#CMAKE_POLICY(PUSH)
#CMAKE_POLICY(SET CMP0072 OLD)

IF (DEFINED OpenGL_GL_PREFERENCE)
  SET (_IMGUI_OpenGL_GL_PREFERENCE ${OpenGL_GL_PREFERENCE})
ELSE()
  UNSET (_IMGUI_OpenGL_GL_PREFERENCE)
ENDIF()
SET(OpenGL_GL_PREFERENCE LEGACY)

FIND_PACKAGE(OpenGL 2 QUIET)
IF(OPENGL_FOUND)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_opengl2.h
    PRIVATE  backends/imgui_impl_opengl2.cpp
  )
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" OpenGL::GL)
  IF(APPLE)
    LIST(APPEND PROJ_LINK_TARGETS "-Wl,-framework,OpenGL")
  ELSE()
    LIST(APPEND PROJ_LINK_TARGETS OpenGL::GL)
  ENDIF()
ENDIF()

IF (DEFINED _IMGUI_OpenGL_GL_PREFERENCE)
  SET (OpenGL_GL_PREFERENCE ${_IMGUI_OpenGL_GL_PREFERENCE})
  UNSET (_IMGUI_OpenGL_GL_PREFERENCE)
ELSE()
  UNSET (OpenGL_GL_PREFERENCE)
ENDIF()
#CMAKE_POLICY(POP)

#
# ImGui - Renderer - OpenGL 3
#
#CMAKE_POLICY(PUSH)
#CMAKE_POLICY(SET CMP0072 NEW)
FIND_PACKAGE(OpenGL QUIET)
IF(OPENGL_FOUND)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_opengl3.h
    PRIVATE  backends/imgui_impl_opengl3.cpp
  )
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" OpenGL::GL)
  IF(APPLE)
    LIST(APPEND PROJ_LINK_TARGETS "-Wl,-framework,OpenGL")
  ELSE()
    LIST(APPEND PROJ_LINK_TARGETS OpenGL::GL)
  ENDIF()
ENDIF()
#CMAKE_POLICY(POP)

#
# ImGui - Platform & Renderer - SDL
#
FIND_PACKAGE(SDL 2 QUIET)
IF(SDL2_FOUND)
  IF(SDL_VERSION VERSION_GREATER_EQUAL 2.0.4)
    TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
      FILE_SET HEADERS
      FILES    backends/imgui_impl_sdl.h
      PRIVATE  backends/imgui_impl_sdl.cpp
    )
    #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" SDL:SDL)
    LIST(APPEND PROJ_LINK_TARGETS SDL::SDL)
  ENDIF()

  IF(SDL_VERSION VERSION_GREATER_EQUAL 2.0.17)
    TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
      FILE_SET HEADERS
      FILES    backends/imgui_impl_sdlrenderer.h
      PRIVATE  backends/imgui_impl_sdlrenderer.cpp
    )
    #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" SDL:SDL)
    LIST(APPEND PROJ_LINK_TARGETS SDL::SDL)
  ENDIF()
ENDIF()

#
# ImGui - Renderer - Vulkan
#
FIND_PACKAGE(Vulkan QUIET)
IF(VULKAN_FOUND)
  TARGET_SOURCES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_vulkan.h
    PRIVATE  backends/imgui_impl_vulkan.cpp
  )
  #TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" Vulkan::Vulkan)
  LIST(APPEND PROJ_LINK_TARGETS Vulkan::Vulkan)
ENDIF()

#
# ImGui - Renderer - WGPU (WebGPU)
#
IF(WebGPU_FOUND)
  TARGET_SOURCES("@IMGUI_TARGET@" "${PROJECT_INCLUDE}"
    FILE_SET HEADERS
    FILES    backends/imgui_impl_wgpu.h
    PRIVATE  backends/imgui_impl_wgpu.cpp
  )
ENDIF()

LIST(REMOVE_DUPLICATES PROJ_LINK_TARGETS)
TARGET_LINK_LIBRARIES(@IMGUI_TARGET@ "${PROJECT_INCLUDE}" "${PROJ_LINK_TARGETS}")

COMMON_CREATE_INSTALL(NAME @IMGUI_NAME@
  TARGETS @IMGUI_TARGET@
  INSTALL
)
